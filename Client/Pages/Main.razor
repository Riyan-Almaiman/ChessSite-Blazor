@page "/"
@using Microsoft.AspNetCore.Components.Forms
@using Newtonsoft.Json;


@inject HttpClient Http
<head>
 
</head>
<body>
 
@if (lobbystatus != "Joined"){

    <EditForm Model="@Lobbyname" OnValidSubmit="CreateLobby">

             <div class="form__group">

                <InputText type="text" class="form__input" id="name" placeholder="Lobby Name" style="width: 100%; height: 50px; font-size: 25px; margin-bottom:20px; margin-top: 20% " @bind-Value="Lobbyname.lobby" />
                </div>  
            <button  class="btn btn-outline-light">Create Lobby</button>

        @if (lobbystatus == "CantCreate")
        {
            <p style="color:red">lobby already exists</p>
        }



    </EditForm>
  


    <EditForm Model="@Lobbyname" OnValidSubmit="JoinLobby">


            <button  class="btn btn-outline-light">Join Lobby</button>


        @if (lobbystatus == "JoinFailed")
        {
            <p style="color:red">lobby is full or doesnt exist</p>
        }


            </EditForm >
        }

        else{
            game();

}





    @{
        void game()
        {
             <Index LobbyName="@Lobbyname.lobby" lobby ="@lobby"/>

        }
    }



@*<div class ="chat" >
<div class="chat-messages">
    @foreach (var message in messages)
    {
        <div>@message</div>
    }
</div>

    <input type="text" @bind="newMessage" placeholder="Type your message here..." />
    <button @onclick="SendMessage">Send</button>
</div>*@

</body>
@code {

    private List<string> messages = new List<string>();
    private string newMessage;

    private void SendMessage()
    {
        messages.Add(newMessage);
        newMessage = "";
    }
    public string? lobbystatus;
    public class lobbyname
    {
        public string? lobby;


    }

    public lobbyname Lobbyname = new();
    public bool ingame; 

    Lobby lobby; 
    async Task JoinLobby()
    {

        if (Lobbyname.lobby != null)
        {

            HttpResponseMessage response = await Http.PutAsJsonAsync<string>("Lobbies/JoinLobby",  Lobbyname.lobby);

            var customerJsonString = await response.Content.ReadAsStringAsync();
            lobby = JsonConvert.DeserializeObject<Lobby>(custome‌​rJsonString);

            if(lobby != null)
            {
                lobby.name = Lobbyname.lobby; 
                lobbystatus = "Joined";

            }
            else 
            {
                lobbystatus = "JoinFailed";

            }

        }



    }

    async Task CreateLobby()
    {

        if (Lobbyname.lobby != null)
        {

            HttpResponseMessage response = await Http.PutAsJsonAsync<string>("/Lobbies/CreateLobby", Lobbyname.lobby);
            var customerJsonString = await response.Content.ReadAsStringAsync();
            lobby = JsonConvert.DeserializeObject<Lobby>(custome‌​rJsonString);


            if(lobby != null)
            {
                lobby.name = Lobbyname.lobby;

                lobbystatus = "Joined";


            }

            else
            {
                lobbystatus = "CantCreate";


            }

        }

    }

}













