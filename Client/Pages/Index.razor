@using BlazorApp_empty2.Pages

@inject NavigationManager Navigation


@code{
    List<string> pieces = new List<string> { "r1", "n1", "b1", "k1", "q1", "b2", "n2", "r2", "R1", "N1", "B1", "Q1", "K1", "B2", "N2", "R2","P1","P2","P3","P4","P5","P6","P7","P8","p8", "p7", "p6", "p5", "p4", "p3", "p2","p1" };

    [Parameter] public string? LobbyName { get; set; }
    public Board board = new();
    public HubConnection hubconnection;
    public int TurnNumber;
    public bool isgameover = false; 
    [Parameter] public Lobby lobby { get; set; }
    public int Player;

    List<string> capturedpieces = new List<string>();


    protected override async Task  OnInitializedAsync()
    {

        hubconnection = new HubConnectionBuilder()
                  .WithUrl(Navigation.ToAbsoluteUri("/GameHub"))
                  .Build();
        await hubconnection.StartAsync();
        await hubconnection.SendAsync("JoinLobby", LobbyName, hubconnection.ConnectionId);



        hubconnection.On<string, string>("ReceiveMove", (tildadd, piece) =>
        {
            moverec(tildadd, piece);
            StateHasChanged();
        });

        hubconnection.On<int>("playernumber", (playernumber) =>
     {

         Player = playernumber;
         board.BoardLayout = lobby.boardstate;
         board.BoardState = lobby.lobbystate;
         TurnNumber = lobby.turn;
         board.TileAddresses = lobby.TileAddresses;

         StateHasChanged();


     });





    }

    public void moverec(string tileadd, string piece)
    {


        int[] index = board.indexOfAddress(tileadd);
        int[] index2 = board.indexOfPiece(piece); 
        if (board.BoardLayout[index[0], index[1]] != "  ")
        {
            capturedpieces.Add(board.BoardLayout[index[0], index[1]]);
        }
        board.BoardLayout[index[0], index[1]] = piece;
        board.BoardLayout[index2[0], index2[1]] = "  ";

        board.BoardState[tileadd] = piece;

        board.BoardState[board.TileAddresses[index2[0], index2[1]]] = "  ";
        int count = 0; 
        TurnNumber++;
        SelectedPiece=null;
        if (piece.ToUpper() == piece)
        {
            foreach (string i in board.BoardLayout)
            {
                if (i.ToUpper() != i && i != "  ")
                {
                    foreach (string a in board.TileAddresses)
                    {
                        int[] arr = board.indexOfAddress(a);
                        if (CheckMoves.IsValidMove(i, board.indexOfPiece(i), arr, board.BoardLayout, pieces) && CheckMoves.IsCheck(i, board.indexOfPiece(i), arr, board.BoardLayout, pieces)) { count++; }
                    }
                }
            }
        }
        if (piece.ToUpper() != piece)
        {
            foreach (string i in board.BoardLayout)
            {
                if (i.ToUpper() == i && i != "  ")
                {
                    foreach (string a in board.TileAddresses)
                    {
                        int[] arr = board.indexOfAddress(a);
                        if (CheckMoves.IsValidMove(i, board.indexOfPiece(i), arr, board.BoardLayout, pieces) && CheckMoves.IsCheck(i, board.indexOfPiece(i), arr, board.BoardLayout, pieces)) { count++; }
                    }
                }
            }
        }



        if (count == 0) { isgameover = true; }

    }




    public void move(string tileadd, string piece)
    {


        int[] index = board.indexOfAddress(tileadd);
        int[] index2 = board.indexOfPiece(piece); 
        if (board.BoardLayout[index[0], index[1]]!="  ")
        {
            capturedpieces.Add(board.BoardLayout[index[0], index[1]]);
        }
        board.BoardLayout[index[0], index[1]] = piece;
        board.BoardLayout[index2[0], index2[1]] = "  ";

        board.BoardState[tileadd] = piece;

        board.BoardState[board.TileAddresses[index2[0], index2[1]]] = "  ";

        TurnNumber++; 
        SelectedPiece=null;
        int count =0; 
        Send(tileadd, piece);   
        if (piece.ToUpper() == piece)
        {
            foreach(string i in board.BoardLayout)
            {
                if (i.ToUpper() != i&&i!="  ")
                {
                    foreach (string a in board.TileAddresses)
                    {
                        int[] arr = board.indexOfAddress(a);
                        if (CheckMoves.IsValidMove(i, board.indexOfPiece(i), arr, board.BoardLayout, pieces) && CheckMoves.IsCheck(i, board.indexOfPiece(i), arr, board.BoardLayout, pieces)) { count++; }
                    }
                }
            }
        }
        if (piece.ToUpper() != piece)
        {
            foreach (string i in board.BoardLayout)
            {
                if (i.ToUpper() == i && i != "  ")
                {
                    foreach (string a in board.TileAddresses)
                    {
                        int[] arr = board.indexOfAddress(a);
                        if (CheckMoves.IsValidMove(i, board.indexOfPiece(i), arr, board.BoardLayout, pieces) && CheckMoves.IsCheck(i, board.indexOfPiece(i), arr, board.BoardLayout, pieces)) { count++; }
                    }
                }
            }
        }

         
        
        if(count==0){ isgameover = true; }

    }

    async Task Send(string tileadd, string piece)
    {


        await hubconnection.SendAsync("SendMove", tileadd, piece, LobbyName);

    }

    List<string> possiblemoves = new List<string>(); 

    public string? SelectedPiece = null;

    void TileClick (string piece, string tile)
    {

        if (possiblemoves.Contains(tile))
        {
            move(tile, SelectedPiece); possiblemoves.Clear();
            return;
        }

        possiblemoves.Clear();


        if(piece == "  "){ return; }
        if(Player == 1)
        {
            if (TurnNumber % 2 == 0){ return; }
        }
         if(Player == 2)
        {
            if (TurnNumber % 2 != 0){ return; }
        }
        if (TurnNumber % 2 == 0 && piece.ToUpper() == piece) { return; }
        if (TurnNumber % 2 != 0 && piece.ToUpper() != piece) { return; }


        SelectedPiece = piece; 
        foreach (string i in board.TileAddresses)
        {
            int[] arr = board.indexOfAddress(i);
            if (CheckMoves.IsValidMove(piece, board.indexOfPiece(piece), arr, board.BoardLayout, pieces) && CheckMoves.IsCheck(piece, board.indexOfPiece(piece), arr, board.BoardLayout, pieces)) { possiblemoves.Add(board.TileAddresses[arr[0], arr[1]]); }

        }
    }



}





<div class="page">

<div class="text">
    <p>



        <h1>Lobby Name: @LobbyName</h1>

        @if (Player == 1)
        {
            if (isgameover)
            {
                <h1 style=" color:red">Game Over! Checkmate!</h1>
            }


            else if (TurnNumber % 2 == 0)
            {
                    <h1 style=" color:red">  Waiting...</h1>
            }
            else
            {
                <h1 style="color:green">It's your turn!</h1>
            }

        }


        @if (Player == 2)
        {
            if (isgameover)
            {
                <h1 style=" color:red">Game Over! Checkmate!</h1>
            }

            else if (TurnNumber % 2 != 0)
            {
                <h1 style=" color:red"> Waiting...</h1>
            }
            else
            {
                <h1 style="color:green">It's your turn!</h1>
            }
        }
    </p>
</div>





    @if(Player == 1){
    <div class="board1">

        <div id="A8" @onclick="@(e => TileClick(board.BoardState["A8"], "A8"))" class="@(board.BoardState["A8"].ToUpper()==board.BoardState["A8"] ? "black" : "white") @(possiblemoves.Contains("A8") ?  "move" : "") whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["A8"])</div></div>
        <div id="B8" @onclick="@(e => TileClick(board.BoardState["B8"], "B8"))" class="@(board.BoardState["B8"].ToUpper()==board.BoardState["B8"] ? "black" : "white") @(possiblemoves.Contains("B8") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["B8"])</div></div>
        <div id="C8" @onclick="@(e => TileClick(board.BoardState["C8"], "C8"))" class="@(board.BoardState["C8"].ToUpper()==board.BoardState["C8"] ? "black" : "white") @(possiblemoves.Contains("C8") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["C8"])</div></div>
        <div id="D8" @onclick="@(e => TileClick(board.BoardState["D8"], "D8"))" class="@(board.BoardState["D8"].ToUpper()==board.BoardState["D8"] ? "black" : "white") @(possiblemoves.Contains("D8") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["D8"])</div></div>
        <div id="E8" @onclick="@(e => TileClick(board.BoardState["E8"], "E8"))" class="@(board.BoardState["E8"].ToUpper()==board.BoardState["E8"] ? "black" : "white") @(possiblemoves.Contains("E8") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["E8"])</div></div>
        <div id="F8" @onclick="@(e => TileClick(board.BoardState["F8"], "F8"))" class="@(board.BoardState["F8"].ToUpper()==board.BoardState["F8"] ? "black" : "white") @(possiblemoves.Contains("F8") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["F8"])</div></div>
        <div id="G8" @onclick="@(e => TileClick(board.BoardState["G8"], "G8"))" class="@(board.BoardState["G8"].ToUpper()==board.BoardState["G8"] ? "black" : "white") @(possiblemoves.Contains("G8") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["G8"])</div></div>
        <div id="H8" @onclick="@(e => TileClick(board.BoardState["H8"], "H8"))" class="@(board.BoardState["H8"].ToUpper()==board.BoardState["H8"] ? "black" : "white") @(possiblemoves.Contains("H8") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["H8"])</div></div>



        <div id="A7" @onclick="@(e => TileClick(board.BoardState["A7"], "A7"))" class="@(board.BoardState["A7"].ToUpper()==board.BoardState["A7"] ? "black" : "white") @(possiblemoves.Contains("A7") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["A7"])</div></div>
        <div id="B7" @onclick="@(e => TileClick(board.BoardState["B7"], "B7"))" class="@(board.BoardState["B7"].ToUpper()==board.BoardState["B7"] ? "black" : "white") @(possiblemoves.Contains("B7") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["B7"])</div></div>
        <div id="C7" @onclick="@(e => TileClick(board.BoardState["C7"], "C7"))" class="@(board.BoardState["C7"].ToUpper()==board.BoardState["C7"] ? "black" : "white") @(possiblemoves.Contains("C7") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["C7"])</div></div>
        <div id="D7" @onclick="@(e => TileClick(board.BoardState["D7"], "D7"))" class="@(board.BoardState["D7"].ToUpper()==board.BoardState["D7"] ? "black" : "white") @(possiblemoves.Contains("D7") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["D7"])</div></div>
        <div id="E7" @onclick="@(e => TileClick(board.BoardState["E7"], "E7"))" class="@(board.BoardState["E7"].ToUpper()==board.BoardState["E7"] ? "black" : "white") @(possiblemoves.Contains("E7") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["E7"])</div></div>
        <div id="F7" @onclick="@(e => TileClick(board.BoardState["F7"] ,"F7"))" class="@(board.BoardState["F7"].ToUpper()==board.BoardState["F7"] ? "black" : "white") @(possiblemoves.Contains("F7") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["F7"])</div></div>
        <div id="G7" @onclick="@(e => TileClick(board.BoardState["G7"], "G7"))" class="@(board.BoardState["G7"].ToUpper()==board.BoardState["G7"] ? "black" : "white") @(possiblemoves.Contains("G7") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["G7"])</div></div>
        <div id="H7" @onclick="@(e => TileClick(board.BoardState["H7"], "H7"))" class="@(board.BoardState["H7"].ToUpper()==board.BoardState["H7"] ? "black" : "white") @(possiblemoves.Contains("H7") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["H7"])</div></div>





        <div id="A6" @onclick="@(e => TileClick(board.BoardState["A6"], "A6"))" class= "@(board.BoardState["A6"].ToUpper()==board.BoardState["A6"] ? "black" : "white") @(possiblemoves.Contains("A6") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["A6"])</div></div>
        <div id="B6" @onclick="@(e => TileClick(board.BoardState["B6"], "B6"))" class= "@(board.BoardState["B6"].ToUpper()==board.BoardState["B6"] ? "black" : "white") @(possiblemoves.Contains("B6") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["B6"])</div></div>
        <div id="C6" @onclick="@(e => TileClick(board.BoardState["C6"], "C6"))" class="@(board.BoardState["C6"].ToUpper()==board.BoardState["C6"] ? "black" : "white") @(possiblemoves.Contains("C6") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["C6"])</div></div>
        <div id="D6" @onclick="@(e => TileClick(board.BoardState["D6"], "D6"))" class="@(board.BoardState["D6"].ToUpper()==board.BoardState["D6"] ? "black" : "white") @(possiblemoves.Contains("D6") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["D6"])</div></div>
        <div id="E6" @onclick="@(e => TileClick(board.BoardState["E6"], "E6"))" class="@(board.BoardState["E6"].ToUpper()==board.BoardState["E6"] ? "black" : "white") @(possiblemoves.Contains("E6") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["E6"])</div></div>
        <div id="F6" @onclick="@(e => TileClick(board.BoardState["F6"], "F6"))" class="@(board.BoardState["F6"].ToUpper()==board.BoardState["F6"] ? "black" : "white") @(possiblemoves.Contains("F6") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["F6"])</div></div>
        <div id="G6" @onclick="@(e => TileClick(board.BoardState["G6"], "G6"))" class="@(board.BoardState["G6"].ToUpper()==board.BoardState["G6"] ? "black" : "white") @(possiblemoves.Contains("G6") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["G6"])</div></div>
        <div id="H6" @onclick="@(e => TileClick(board.BoardState["H6"], "H6"))" class="@(board.BoardState["H6"].ToUpper()==board.BoardState["H6"] ? "black" : "white") @(possiblemoves.Contains("H6") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["H6"])</div></div>


        <div id="A5" @onclick="@(e => TileClick(board.BoardState["A5"], "A5"))" class="@(board.BoardState["A5"].ToUpper()==board.BoardState["A5"] ? "black" : "white") @(possiblemoves.Contains("A5") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["A5"])</div></div>
        <div id="B5" @onclick="@(e => TileClick(board.BoardState["B5"], "B5"))" class="@(board.BoardState["B5"].ToUpper()==board.BoardState["B5"] ? "black" : "white") @(possiblemoves.Contains("B5") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["B5"])</div></div>
        <div id="C5" @onclick="@(e => TileClick(board.BoardState["C5"], "C5"))" class="@(board.BoardState["C5"].ToUpper()==board.BoardState["C5"] ? "black" : "white") @(possiblemoves.Contains("C5") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["C5"])</div></div>
        <div id="D5" @onclick="@(e => TileClick(board.BoardState["D5"], "D5"))" class="@(board.BoardState["D5"].ToUpper()==board.BoardState["D5"] ? "black" : "white") @(possiblemoves.Contains("D5") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["D5"])</div></div>
        <div id="E5" @onclick="@(e => TileClick(board.BoardState["E5"], "E5"))" class="@(board.BoardState["E5"].ToUpper()==board.BoardState["E5"] ? "black" : "white") @(possiblemoves.Contains("E5") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["E5"])</div></div>
        <div id="F5" @onclick="@(e => TileClick(board.BoardState["F5"], "F5"))" class="@(board.BoardState["F5"].ToUpper()==board.BoardState["F5"] ? "black" : "white") @(possiblemoves.Contains("F5") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["F5"])</div></div>
        <div id="G5" @onclick="@(e => TileClick(board.BoardState["G5"], "G5"))" class="@(board.BoardState["G5"].ToUpper()==board.BoardState["G5"] ? "black" : "white") @(possiblemoves.Contains("G5") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["G5"])</div></div>
        <div id="H5" @onclick="@(e => TileClick(board.BoardState["H5"], "H5"))" class="@(board.BoardState["H5"].ToUpper()==board.BoardState["H5"] ? "black" : "white") @(possiblemoves.Contains("H5") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["H5"])</div></div>


        <div id="A4" @onclick="@(e => TileClick(board.BoardState["A4"], "A4"))" class="@(board.BoardState["A4"].ToUpper()==board.BoardState["A4"] ? "black" : "white") @(possiblemoves.Contains("A4") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["A4"])</div></div>
        <div id="B4" @onclick="@(e => TileClick(board.BoardState["B4"], "B4"))" class="@(board.BoardState["B4"].ToUpper()==board.BoardState["B4"] ? "black" : "white") @(possiblemoves.Contains("B4") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["B4"])</div></div>
        <div id="C4" @onclick="@(e => TileClick(board.BoardState["C4"], "C4"))" class="@(board.BoardState["C4"].ToUpper()==board.BoardState["C4"] ? "black" : "white") @(possiblemoves.Contains("C4") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["C4"])</div></div>
        <div id="D4" @onclick="@(e => TileClick(board.BoardState["D4"], "D4"))" class="@(board.BoardState["D4"].ToUpper()==board.BoardState["D4"] ? "black" : "white") @(possiblemoves.Contains("D4") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["D4"])</div></div>
        <div id="E4" @onclick="@(e => TileClick(board.BoardState["E4"], "E4"))" class="@(board.BoardState["E4"].ToUpper()==board.BoardState["E4"] ? "black" : "white") @(possiblemoves.Contains("E4") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["E4"])</div></div>
        <div id="F4" @onclick="@(e => TileClick(board.BoardState["F4"], "F4"))" class="@(board.BoardState["F4"].ToUpper()==board.BoardState["F4"] ? "black" : "white") @(possiblemoves.Contains("F4") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["F4"])</div></div>
        <div id="G4" @onclick="@(e => TileClick(board.BoardState["G4"], "G4"))" class="@(board.BoardState["G4"].ToUpper()==board.BoardState["G4"] ? "black" : "white") @(possiblemoves.Contains("G4") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["G4"])</div></div>
        <div id="H4" @onclick="@(e => TileClick(board.BoardState["H4"], "H4"))" class="@(board.BoardState["H4"].ToUpper()==board.BoardState["H4"] ? "black" : "white") @(possiblemoves.Contains("H4") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["H4"])</div></div>

        <div id="A3" @onclick="@(e => TileClick(board.BoardState["A3"], "A3"))" class="@(board.BoardState["A3"].ToUpper()==board.BoardState["A3"] ? "black" : "white") @(possiblemoves.Contains("A3") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["A3"])</div></div>
        <div id="B3" @onclick="@(e => TileClick(board.BoardState["B3"], "B3"))" class="@(board.BoardState["B3"].ToUpper()==board.BoardState["B3"] ? "black" : "white") @(possiblemoves.Contains("B3") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["B3"])</div></div>
        <div id="C3" @onclick="@(e => TileClick(board.BoardState["C3"], "C3"))" class="@(board.BoardState["C3"].ToUpper()==board.BoardState["C3"] ? "black" : "white") @(possiblemoves.Contains("C3") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["C3"])</div></div>
        <div id="D3" @onclick="@(e => TileClick(board.BoardState["D3"], "D3"))" class="@(board.BoardState["D3"].ToUpper()==board.BoardState["D3"] ? "black" : "white") @(possiblemoves.Contains("D3") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["D3"])</div></div>
        <div id="E3" @onclick="@(e => TileClick(board.BoardState["E3"], "E3"))" class="@(board.BoardState["E3"].ToUpper()==board.BoardState["E3"] ? "black" : "white") @(possiblemoves.Contains("E3") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["E3"])</div></div>
        <div id="F3" @onclick="@(e => TileClick(board.BoardState["F3"], "F3"))" class="@(board.BoardState["F3"].ToUpper()==board.BoardState["F3"] ? "black" : "white") @(possiblemoves.Contains("F3") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["F3"])</div></div>
        <div id="G3" @onclick="@(e => TileClick(board.BoardState["G3"], "G3"))" class="@(board.BoardState["G3"].ToUpper()==board.BoardState["G3"] ? "black" : "white") @(possiblemoves.Contains("G3") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["G3"])</div></div>
        <div id="H3" @onclick="@(e => TileClick(board.BoardState["H3"], "H3"))" class="@(board.BoardState["H3"].ToUpper()==board.BoardState["H3"] ? "black" : "white") @(possiblemoves.Contains("H3") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["H3"])</div></div>

        <div id="A2" @onclick="@(e => TileClick(board.BoardState["A2"], "A2"))" class="@(board.BoardState["A2"].ToUpper()==board.BoardState["A2"] ? "black" : "white") @(possiblemoves.Contains("A2") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["A2"])</div></div>
        <div id="B2" @onclick="@(e => TileClick(board.BoardState["B2"], "B2"))" class="@(board.BoardState["B2"].ToUpper()==board.BoardState["B2"] ? "black" : "white") @(possiblemoves.Contains("B2") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["B2"])</div></div>
        <div id="C2" @onclick="@(e => TileClick(board.BoardState["C2"], "C2"))" class="@(board.BoardState["C2"].ToUpper()==board.BoardState["C2"] ? "black" : "white") @(possiblemoves.Contains("C2") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["C2"])</div></div>
        <div id="D2" @onclick="@(e => TileClick(board.BoardState["D2"], "D2"))" class="@(board.BoardState["D2"].ToUpper()==board.BoardState["D2"] ? "black" : "white") @(possiblemoves.Contains("D2") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["D2"])</div></div>
        <div id="E2" @onclick="@(e => TileClick(board.BoardState["E2"], "E2"))" class="@(board.BoardState["E2"].ToUpper()==board.BoardState["E2"] ? "black" : "white") @(possiblemoves.Contains("E2") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["E2"])</div></div>
        <div id="F2" @onclick="@(e => TileClick(board.BoardState["F2"], "F2"))" class="@(board.BoardState["F2"].ToUpper()==board.BoardState["F2"] ? "black" : "white") @(possiblemoves.Contains("F2") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["F2"])</div></div>
        <div id="G2" @onclick="@(e => TileClick(board.BoardState["G2"], "G2"))" class="@(board.BoardState["G2"].ToUpper()==board.BoardState["G2"] ? "black" : "white") @(possiblemoves.Contains("G2") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["G2"])</div></div>
        <div id="H2" @onclick="@(e => TileClick(board.BoardState["H2"], "H2"))" class="@(board.BoardState["H2"].ToUpper()==board.BoardState["H2"] ? "black" : "white") @(possiblemoves.Contains("H2") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["H2"])</div></div>

        <div id="A1" @onclick="@(e => TileClick(board.BoardState["A1"], "A1"))" class="@(board.BoardState["A1"].ToUpper()==board.BoardState["A1"] ? "black" : "white") @(possiblemoves.Contains("A1") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["A1"])</div></div>
        <div id="B1" @onclick="@(e => TileClick(board.BoardState["B1"], "B1"))" class="@(board.BoardState["B1"].ToUpper()==board.BoardState["B1"] ? "black" : "white") @(possiblemoves.Contains("B1") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["B1"])</div></div>
        <div id="C1" @onclick="@(e => TileClick(board.BoardState["C1"], "C1"))" class="@(board.BoardState["C1"].ToUpper()==board.BoardState["C1"] ? "black" : "white") @(possiblemoves.Contains("C1") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["C1"])</div></div>
        <div id="D1" @onclick="@(e => TileClick(board.BoardState["D1"], "D1"))" class="@(board.BoardState["D1"].ToUpper()==board.BoardState["D1"] ? "black" : "white") @(possiblemoves.Contains("D1") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["D1"])</div></div>
        <div id="E1" @onclick="@(e => TileClick(board.BoardState["E1"], "E1"))" class="@(board.BoardState["E1"].ToUpper()==board.BoardState["E1"] ? "black" : "white") @(possiblemoves.Contains("E1") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["E1"])</div></div>
        <div id="F1" @onclick="@(e => TileClick(board.BoardState["F1"], "F1"))" class="@(board.BoardState["F1"].ToUpper()==board.BoardState["F1"] ? "black" : "white") @(possiblemoves.Contains("F1") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["F1"])</div></div>
        <div id="G1" @onclick="@(e => TileClick(board.BoardState["G1"], "G1"))" class="@(board.BoardState["G1"].ToUpper()==board.BoardState["G1"] ? "black" : "white") @(possiblemoves.Contains("G1") ? "move" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["G1"])</div></div>
            <div id="H1" @onclick="@(e => TileClick(board.BoardState["H1"], "H1"))" class="@(board.BoardState["H1"].ToUpper()==board.BoardState["H1"] ? "black" : "white") @(possiblemoves.Contains("H1") ? "move" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["H1"])</div></div>
        </div>
    }

     @if (Player == 2){
     <div class="board2">

            <div id="H1" @onclick="@(e => TileClick(board.BoardState["H1"], "H1"))" class="@(board.BoardState["H1"].ToUpper()==board.BoardState["H1"] ? "black" : "white") @(possiblemoves.Contains("H1") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["H1"])</div></div>
            <div id="G1" @onclick="@(e => TileClick(board.BoardState["G1"], "G1"))" class="@(board.BoardState["G1"].ToUpper()==board.BoardState["G1"] ? "black" : "white") @(possiblemoves.Contains("G1") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["G1"])</div></div>
            <div id="F1" @onclick="@(e => TileClick(board.BoardState["F1"], "F1"))" class="@(board.BoardState["F1"].ToUpper()==board.BoardState["F1"] ? "black" : "white") @(possiblemoves.Contains("F1") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["F1"])</div></div>
            <div id="E1" @onclick="@(e => TileClick(board.BoardState["E1"], "E1"))" class="@(board.BoardState["E1"].ToUpper()==board.BoardState["E1"] ? "black" : "white") @(possiblemoves.Contains("E1") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["E1"])</div></div>
            <div id="D1" @onclick="@(e => TileClick(board.BoardState["D1"], "D1"))" class="@(board.BoardState["D1"].ToUpper()==board.BoardState["D1"] ? "black" : "white") @(possiblemoves.Contains("D1") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["D1"])</div></div>
            <div id="C1" @onclick="@(e => TileClick(board.BoardState["C1"], "C1"))" class="@(board.BoardState["C1"].ToUpper()==board.BoardState["C1"] ? "black" : "white") @(possiblemoves.Contains("C1") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["C1"])</div></div>
            <div id="B1" @onclick="@(e => TileClick(board.BoardState["B1"], "B1"))" class="@(board.BoardState["B1"].ToUpper()==board.BoardState["B1"] ? "black" : "white") @(possiblemoves.Contains("B1") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["B1"])</div></div>
            <div id="A1" @onclick="@(e => TileClick(board.BoardState["A1"], "A1"))" class="@(board.BoardState["A1"].ToUpper()==board.BoardState["A1"] ? "black" : "white") @(possiblemoves.Contains("A1") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["A1"])</div></div>

            <div id="H2" @onclick="@(e => TileClick(board.BoardState["H2"], "H2"))" class="@(board.BoardState["H2"].ToUpper()==board.BoardState["H2"] ? "black" : "white") @(possiblemoves.Contains("H2") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["H2"])</div></div>
            <div id="G2" @onclick="@(e => TileClick(board.BoardState["G2"], "G2"))" class="@(board.BoardState["G2"].ToUpper()==board.BoardState["G2"] ? "black" : "white") @(possiblemoves.Contains("G2") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["G2"])</div></div>
            <div id="F2" @onclick="@(e => TileClick(board.BoardState["F2"], "F2"))" class="@(board.BoardState["F2"].ToUpper()==board.BoardState["F2"] ? "black" : "white") @(possiblemoves.Contains("F2") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["F2"])</div></div>
            <div id="E2" @onclick="@(e => TileClick(board.BoardState["E2"], "E2"))" class="@(board.BoardState["E2"].ToUpper()==board.BoardState["E2"] ? "black" : "white") @(possiblemoves.Contains("E2") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["E2"])</div></div>
            <div id="D2" @onclick="@(e => TileClick(board.BoardState["D2"], "D2"))" class="@(board.BoardState["D2"].ToUpper()==board.BoardState["D2"] ? "black" : "white") @(possiblemoves.Contains("D2") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["D2"])</div></div>
            <div id="C2" @onclick="@(e => TileClick(board.BoardState["C2"], "C2"))" class="@(board.BoardState["C2"].ToUpper()==board.BoardState["C2"] ? "black" : "white") @(possiblemoves.Contains("C2") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["C2"])</div></div>
            <div id="B2" @onclick="@(e => TileClick(board.BoardState["B2"], "B2"))" class="@(board.BoardState["B2"].ToUpper()==board.BoardState["B2"] ? "black" : "white") @(possiblemoves.Contains("B2") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["B2"])</div></div>
            <div id="A2" @onclick="@(e => TileClick(board.BoardState["A2"], "A2"))" class="@(board.BoardState["A2"].ToUpper()==board.BoardState["A2"] ? "black" : "white") @(possiblemoves.Contains("A2") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["A2"])</div></div>

            <div id="H3" @onclick="@(e => TileClick(board.BoardState["H3"], "H3"))" class="@(board.BoardState["H3"].ToUpper()==board.BoardState["H3"] ? "black" : "white") @(possiblemoves.Contains("H3") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["H3"])</div></div>
            <div id="G3" @onclick="@(e => TileClick(board.BoardState["G3"], "G3"))" class="@(board.BoardState["G3"].ToUpper()==board.BoardState["G3"] ? "black" : "white") @(possiblemoves.Contains("G3") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["G3"])</div></div>
            <div id="F3" @onclick="@(e => TileClick(board.BoardState["F3"], "F3"))" class="@(board.BoardState["F3"].ToUpper()==board.BoardState["F3"] ? "black" : "white") @(possiblemoves.Contains("F3") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["F3"])</div></div>
            <div id="E3" @onclick="@(e => TileClick(board.BoardState["E3"], "E3"))" class="@(board.BoardState["E3"].ToUpper()==board.BoardState["E3"] ? "black" : "white") @(possiblemoves.Contains("E3") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["E3"])</div></div>
            <div id="D3" @onclick="@(e => TileClick(board.BoardState["D3"], "D3"))" class="@(board.BoardState["D3"].ToUpper()==board.BoardState["D3"] ? "black" : "white") @(possiblemoves.Contains("D3") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["D3"])</div></div>
            <div id="C3" @onclick="@(e => TileClick(board.BoardState["C3"], "C3"))" class="@(board.BoardState["C3"].ToUpper()==board.BoardState["C3"] ? "black" : "white") @(possiblemoves.Contains("C3") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["C3"])</div></div>
            <div id="B3" @onclick="@(e => TileClick(board.BoardState["B3"], "B3"))" class="@(board.BoardState["B3"].ToUpper()==board.BoardState["B3"] ? "black" : "white") @(possiblemoves.Contains("B3") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["B3"])</div></div>
            <div id="A3" @onclick="@(e => TileClick(board.BoardState["A3"], "A3"))" class="@(board.BoardState["A3"].ToUpper()==board.BoardState["A3"] ? "black" : "white") @(possiblemoves.Contains("A3") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["A3"])</div></div>

            <div id="H4" @onclick="@(e => TileClick(board.BoardState["H4"], "H4"))" class="@(board.BoardState["H4"].ToUpper()==board.BoardState["H4"] ? "black" : "white") @(possiblemoves.Contains("H4") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["H4"])</div></div>
            <div id="G4" @onclick="@(e => TileClick(board.BoardState["G4"], "G4"))" class="@(board.BoardState["G4"].ToUpper()==board.BoardState["G4"] ? "black" : "white") @(possiblemoves.Contains("G4") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["G4"])</div></div>
            <div id="F4" @onclick="@(e => TileClick(board.BoardState["F4"], "F4"))" class="@(board.BoardState["F4"].ToUpper()==board.BoardState["F4"] ? "black" : "white") @(possiblemoves.Contains("F4") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["F4"])</div></div>
            <div id="E4" @onclick="@(e => TileClick(board.BoardState["E4"], "E4"))" class="@(board.BoardState["E4"].ToUpper()==board.BoardState["E4"] ? "black" : "white") @(possiblemoves.Contains("E4") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["E4"])</div></div>
            <div id="D4" @onclick="@(e => TileClick(board.BoardState["D4"], "D4"))" class="@(board.BoardState["D4"].ToUpper()==board.BoardState["D4"] ? "black" : "white") @(possiblemoves.Contains("D4") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["D4"])</div></div>
            <div id="C4" @onclick="@(e => TileClick(board.BoardState["C4"], "C4"))" class="@(board.BoardState["C4"].ToUpper()==board.BoardState["C4"] ? "black" : "white") @(possiblemoves.Contains("C4") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["C4"])</div></div>
            <div id="B4" @onclick="@(e => TileClick(board.BoardState["B4"], "B4"))" class="@(board.BoardState["B4"].ToUpper()==board.BoardState["B4"] ? "black" : "white") @(possiblemoves.Contains("B4") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["B4"])</div></div>
            <div id="A4" @onclick="@(e => TileClick(board.BoardState["A4"], "A4"))" class="@(board.BoardState["A4"].ToUpper()==board.BoardState["A4"] ? "black" : "white") @(possiblemoves.Contains("A4") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["A4"])</div></div>

            <div id="H5" @onclick="@(e => TileClick(board.BoardState["H5"], "H5"))" class="@(board.BoardState["H5"].ToUpper()==board.BoardState["H5"] ? "black" : "white") @(possiblemoves.Contains("H5") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["H5"])</div></div>
            <div id="G5" @onclick="@(e => TileClick(board.BoardState["G5"], "G5"))" class="@(board.BoardState["G5"].ToUpper()==board.BoardState["G5"] ? "black" : "white") @(possiblemoves.Contains("G5") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["G5"])</div></div>
            <div id="F5" @onclick="@(e => TileClick(board.BoardState["F5"], "F5"))" class="@(board.BoardState["F5"].ToUpper()==board.BoardState["F5"] ? "black" : "white") @(possiblemoves.Contains("F5") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["F5"])</div></div>
            <div id="E5" @onclick="@(e => TileClick(board.BoardState["E5"], "E5"))" class="@(board.BoardState["E5"].ToUpper()==board.BoardState["E5"] ? "black" : "white") @(possiblemoves.Contains("E5") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["E5"])</div></div>
            <div id="D5" @onclick="@(e => TileClick(board.BoardState["D5"], "D5"))" class="@(board.BoardState["D5"].ToUpper()==board.BoardState["D5"] ? "black" : "white") @(possiblemoves.Contains("D5") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["D5"])</div></div>
            <div id="C5" @onclick="@(e => TileClick(board.BoardState["C5"], "C5"))" class="@(board.BoardState["C5"].ToUpper()==board.BoardState["C5"] ? "black" : "white") @(possiblemoves.Contains("C5") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["C5"])</div></div>
            <div id="B5" @onclick="@(e => TileClick(board.BoardState["B5"], "B5"))" class="@(board.BoardState["B5"].ToUpper()==board.BoardState["B5"] ? "black" : "white") @(possiblemoves.Contains("B5") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["B5"])</div></div>
            <div id="A5" @onclick="@(e => TileClick(board.BoardState["A5"], "A5"))" class="@(board.BoardState["A5"].ToUpper()==board.BoardState["A5"] ? "black" : "white") @(possiblemoves.Contains("A5") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["A5"])</div></div>



            <div id="H6" @onclick="@(e => TileClick(board.BoardState["H6"], "H6"))" class="@(board.BoardState["H6"].ToUpper()==board.BoardState["H6"] ? "black" : "white") @(possiblemoves.Contains("H6") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["H6"])</div></div>
            <div id="G6" @onclick="@(e => TileClick(board.BoardState["G6"], "G6"))" class="@(board.BoardState["G6"].ToUpper()==board.BoardState["G6"] ? "black" : "white") @(possiblemoves.Contains("G6") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["G6"])</div></div>
            <div id="F6" @onclick="@(e => TileClick(board.BoardState["F6"], "F6"))" class="@(board.BoardState["F6"].ToUpper()==board.BoardState["F6"] ? "black" : "white") @(possiblemoves.Contains("F6") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["F6"])</div></div>
            <div id="E6" @onclick="@(e => TileClick(board.BoardState["E6"], "E6"))" class="@(board.BoardState["E6"].ToUpper()==board.BoardState["E6"] ? "black" : "white") @(possiblemoves.Contains("E6") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["E6"])</div></div>
            <div id="D6" @onclick="@(e => TileClick(board.BoardState["D6"], "D6"))" class="@(board.BoardState["D6"].ToUpper()==board.BoardState["D6"] ? "black" : "white") @(possiblemoves.Contains("D6") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["D6"])</div></div>
            <div id="C6" @onclick="@(e => TileClick(board.BoardState["C6"], "C6"))" class="@(board.BoardState["C6"].ToUpper()==board.BoardState["C6"] ? "black" : "white") @(possiblemoves.Contains("C6") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["C6"])</div></div>
            <div id="B6" @onclick="@(e => TileClick(board.BoardState["B6"], "B6"))" class="@(board.BoardState["B6"].ToUpper()==board.BoardState["B6"] ? "black" : "white") @(possiblemoves.Contains("B6") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["B6"])</div></div>
            <div id="A6" @onclick="@(e => TileClick(board.BoardState["A6"], "A6"))" class="@(board.BoardState["A6"].ToUpper()==board.BoardState["A6"] ? "black" : "white") @(possiblemoves.Contains("A6") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["A6"])</div></div>

            <div id="H7" @onclick="@(e => TileClick(board.BoardState["H7"], "H7"))" class="@(board.BoardState["H7"].ToUpper()==board.BoardState["H7"] ? "black" : "white") @(possiblemoves.Contains("H7") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["H7"])</div></div>
            <div id="G7" @onclick="@(e => TileClick(board.BoardState["G7"], "G7"))" class="@(board.BoardState["G7"].ToUpper()==board.BoardState["G7"] ? "black" : "white") @(possiblemoves.Contains("G7") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["G7"])</div></div>
            <div id="F7" @onclick="@(e => TileClick(board.BoardState["F7"] ,"F7"))" class="@(board.BoardState["F7"].ToUpper()==board.BoardState["F7"] ? "black" : "white") @(possiblemoves.Contains("F7") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["F7"])</div></div>
            <div id="E7" @onclick="@(e => TileClick(board.BoardState["E7"], "E7"))" class="@(board.BoardState["E7"].ToUpper()==board.BoardState["E7"] ? "black" : "white") @(possiblemoves.Contains("E7") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["E7"])</div></div>
            <div id="D7" @onclick="@(e => TileClick(board.BoardState["D7"], "D7"))" class="@(board.BoardState["D7"].ToUpper()==board.BoardState["D7"] ? "black" : "white") @(possiblemoves.Contains("D7") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["D7"])</div></div>
            <div id="C7" @onclick="@(e => TileClick(board.BoardState["C7"], "C7"))" class="@(board.BoardState["C7"].ToUpper()==board.BoardState["C7"] ? "black" : "white") @(possiblemoves.Contains("C7") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["C7"])</div></div>
            <div id="B7" @onclick="@(e => TileClick(board.BoardState["B7"], "B7"))" class="@(board.BoardState["B7"].ToUpper()==board.BoardState["B7"] ? "black" : "white") @(possiblemoves.Contains("B7") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["B7"])</div></div>
            <div id="A7" @onclick="@(e => TileClick(board.BoardState["A7"], "A7"))" class="@(board.BoardState["A7"].ToUpper()==board.BoardState["A7"] ? "black" : "white") @(possiblemoves.Contains("A7") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["A7"])</div></div>
            <div id="H8" @onclick="@(e => TileClick(board.BoardState["H8"], "H8"))" class="@(board.BoardState["H8"].ToUpper()==board.BoardState["H8"] ? "black" : "white") @(possiblemoves.Contains("H8") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["H8"])</div></div>
            <div id="G8" @onclick="@(e => TileClick(board.BoardState["G8"], "G8"))" class="@(board.BoardState["G8"].ToUpper()==board.BoardState["G8"] ? "black" : "white") @(possiblemoves.Contains("G8") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["G8"])</div></div>
            <div id="F8" @onclick="@(e => TileClick(board.BoardState["F8"], "F8"))" class="@(board.BoardState["F8"].ToUpper()==board.BoardState["F8"] ? "black" : "white") @(possiblemoves.Contains("F8") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["F8"])</div></div>
            <div id="E8" @onclick="@(e => TileClick(board.BoardState["E8"], "E8"))" class="@(board.BoardState["E8"].ToUpper()==board.BoardState["E8"] ? "black" : "white") @(possiblemoves.Contains("E8") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["E8"])</div></div>
            <div id="D8" @onclick="@(e => TileClick(board.BoardState["D8"], "D8"))" class="@(board.BoardState["D8"].ToUpper()==board.BoardState["D8"] ? "black" : "white") @(possiblemoves.Contains("D8") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["D8"])</div></div>
            <div id="C8" @onclick="@(e => TileClick(board.BoardState["C8"], "C8"))" class="@(board.BoardState["C8"].ToUpper()==board.BoardState["C8"] ? "black" : "white") @(possiblemoves.Contains("C8") ? "move1" : "")  whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["C8"])</div></div>
            <div id="B8" @onclick="@(e => TileClick(board.BoardState["B8"], "B8"))" class="@(board.BoardState["B8"].ToUpper()==board.BoardState["B8"] ? "black" : "white") @(possiblemoves.Contains("B8") ? "move1" : "")  blackSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["B8"])</div></div>
            <div id="A8" @onclick="@(e => TileClick(board.BoardState["A8"], "A8"))" class="@(board.BoardState["A8"].ToUpper()==board.BoardState["A8"] ? "black" : "white") @(possiblemoves.Contains("A8") ?  "move1" : "") whiteSquare "><div class ="piece">@PieceMap.Pieces(board.BoardState["A8"])</div></div>


        </div>

    }


  <div  class="deadpieces">
    <h1>Captured Pieces: </h1>
    

    @foreach (string piece in capturedpieces)
    {
            <div class="@(piece.ToUpper()==piece ? "black" : "white")">@PieceMap.Pieces(piece)</div>
        }   

</div>
</div>





   